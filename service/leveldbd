#!/usr/bin/env python3
# -*- coding: utf-8 -*-


import asyncio
from aiohttp import web
import plyvel

class AIOLevelDB():
    def __init__(self, *args, **kwargs):
        self._lldb = plyvel.DB(*args, **kwargs)
        self._lock = asyncio.Lock()

    async def get(self, *args, **kwargs):
        async with self._lock:
            return self._lldb.get(*args, **kwargs)

    async def put(self, *args, **kwargs):
        async with self._lock:
            return self._lldb.put(*args, **kwargs)

    async def delete(self, *args, **kwargs):
        async with self._lock:
            return self._lldb.delete(*args, **kwargs)


async def index_get(request: web.Request):
    ldb = request.app['ldb']
    data = await ldb.get(request.query['word'].encode())
    return web.Response(body=data or b'')

async def index_post(request: web.Request):
    ldb = request.app['ldb']
    await ldb.put(request.query['word'].encode(), (await request.content.read()), sync=True)
    return web.Response(body=b'')

async def index_put(request: web.Request):
    ldb = request.app['ldb']
    await ldb.put(request.query['word'].encode(), (await request.content.read()), sync=True)
    return web.Response(body=b'')

async def index_delete(request: web.Request):
    ldb = request.app['ldb']
    await ldb.delete(request.query['word'].encode())
    return web.Response(body=b'')

def setup_routes(app):
    app.add_routes([
        web.get('/', index_get),
        web.put('/', index_put),
        web.post('/', index_post),
        web.delete('/', index_delete),
    ])

def main():
    app = web.Application()
    setup_routes(app)
    app['ldb'] = AIOLevelDB('/usr/local/share/ici/ici_db', create_if_missing=True)
    web.run_app(app, host='localhost', port=5432)

if __name__ == "__main__":
    main()
